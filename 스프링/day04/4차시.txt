스프링4차시 

학습목표 :
 1. HttpServletRequest  request요청 프로토콜의 구성을 말할 수 있다 .
 2. 서버요청시  Get요청, Post요청을 구분할 수 있다.
 3. Controller의 응답type에 대해서 알 수 있다.
 4. @Response의 역할에 대해서 알 수 있다.
 5. Ajax (jquery 라이브러리)이용하여 서버에 데이터를 요청할 수 있다.
 6. 파일업로드를 할 수 있다. 



#### 정리######
요청정보 확인하기 (요청줄 + 요청헤더 + 요청바디) 구성됨

controller 응답 type 확인하기
1.  mvc : view 반환 (view + 데이터)
    - void,
    - String 
    -  ModelAndView  
   
2 데이터반환 (json으로 변환해줌)  
  - @ResponseBody   ( json 관련 라이브러리 필요함 - jackson-data-bind  , jackson mapper ) 
  - ResponseEntity<T> :응답데이터와 헤더정보를 함께 보내기

form에서 요청하기 (get, post) 
  get: 요청헤더에서 데이터 꺼내옴
  post: 요청바디에서 데이터 읽어옴    

ajax로 요청하기
 method type => get, post, put, delete 사용할 수 있다.   

 ###API 설계하기 ######
고객정보 등록, 조회, 변경, 삭제하기

권고사항>>
API설계시  url 매핑이름은 명사형으로 각 기능은  method Type으로 구분한다




#################
파일업로드  :  사용자의 컴퓨터에 있는 이미지를 서버에 올리기 (form사용해야 함, 반드시 method="post")
###################
 

 파일업로드 <form action="/upload/spring/upload" method="post" enctype="multipart/form-data">  
 파일업로드시 반드시 method="post"  enctype="multipart/form-data" 해야함 
 -파일업로드 한 이미지 보여주기  
 -파일업로드 한 후 다운로드 하기  


파일업로드 관련 dependency
 	 <dependency>
	     <groupId>commons-fileupload</groupId>
	     <artifactId>commons-fileupload</artifactId>
	     <version>1.3.1</version>
	 </dependency>		
	<!-- commons-io -->
	<dependency>
	    <groupId>commons-io</groupId>
	    <artifactId>commons-io</artifactId>
	    <version>2.4</version>
	</dependency>


servlet-context에 내용 추가	
   <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">     
      <beans:property name="maxUploadSize" value="10485760" />  <!--  10M   1024byte * 1024  1mbyte  *10  = 10M -->
      <beans:property name="defaultEncoding" value="utf-8" />      <!--  l024byte =>1kbyte   , 1024kbyte == >1M   *10   =>10M -->
   </beans:bean>
 
 
